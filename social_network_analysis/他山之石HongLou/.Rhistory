install.packages('Seurat')
install.packages("reshape2")
install.packages("RcppArmadillo")
install.packages('Seurat')
install.packages("httr")
install.packages("httr")
install.packages("curl")
install.packages("Seurat")
install.packages("spatstat.geom")
install.packages("deldir")
install.packages("reticulate")
install.packages("png")
library(Seurat)
install.packages("harmony")
remotes::install_github('chris-mcginnis-ucsf/DoubletFinder')
BiocManager::install("org.Mm.eg.db")
BiocManager::install("ComplexHeatmap")
BiocManager::install("ComplexHeatmap")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
BiocManager::install("ComplexHeatmap")
install.packages("Cario")
BiocManager::install("ComplexHeatmap")
BiocManager::install("ComplexHeatmap")
BiocManager::install("GENIE3")
devtools::install_local("~/Desktop/ArchR-master.zip")
BiocManager::install(c("motifmatchr", "chromVAR", "Rsamtools"))
BiocManager::install(c("motifmatchr", "chromVAR", "Rsamtools"))
BiocManager::install(c("motifmatchr", "chromVAR", "Rsamtools"))
devtools::install_local("~/Desktop/ArchR-master.zip")
BiocManager::install("motifmatchr")
BiocManager::install("Rhtslib")
BiocManager::install("Rhtslib")
devtools::install_local("~/Desktop/ArchR-master.zip")
BiocManager::install(c("motifmatchr", "chromVAR", "Rsamtools"))
library(ArchR)
devtools::install_local("~/Desktop/ArchR-master.zip")
library(ArchR)
install_github("r3fang/SnapATAC")
library(devtools)
install_github("r3fang/SnapATAC")
install_local("~/Downloads/SnapATAC-master.zip")
BiocManager::install('raster')
install_local("~/Downloads/SnapATAC-master.zip")
install_local("~/Downloads/SnapATAC-master.zip")
install.packages("doSNOW")
install_local("~/Downloads/SnapATAC-master.zip")
install.packages("plot3D")
install_local("~/Downloads/SnapATAC-master.zip")
if (!require(BiocManager)) {
install.packages("BiocManager")
}
BiocManager::install(c("DropletUtils", "monocle", "SingleR", "BUSpaRse", "scater", "scran"))
library(monocle)
?orderCells
devtools::install_local("~/Desktop/leidenbase-master.zip")
613700000-569722596
613700000-569722596 + 50000
44027404/50000
569722596/50000
457089131/50000
25733052/50000
library(SnapATAC)
library(devtools)
devtools::install_local("~/Desktop/ArchR-1.0.1.zip")
library(ArchR)
.libPaths()
install.packages("rhdf5", lib = "/home/ggj/R/x86_64-pc-linux-gnu-library/4.1")
BiocManager::install("rhdf5")
library(rhdf5)
library(Rsamtools)
library(ArchR)
BiocManager::install("rhdf5")
BiocManager::install("S4Vectors")
BiocManager::install("SummarizedExperiment")
BiocManager::install("BiocGenerics")
BiocManager::install("GenomicRanges")
BiocManager::install("motifmatchr")
BiocManager::install("chromVAR")
BiocManager::install("Rsamtools")
BiocManager::install("Biostrings")
library(rhdf5)
h5testFileLocking("/media/ggj/myqFiles/ATAC_res/211116/ArrowFiles/504.arrow")
h5testFileLocking("/media/ggj/myqFiles/ATAC_res/211116/ArrowFiles/")
h5testFileLocking("/media/ggj/myqFiles/ATAC_res/")
h5disableFileLocking()
h5testFileLocking("/media/ggj/myqFiles/ATAC_res/")
h5disableFileLocking()
h5disableFileLocking()
?h5disableFileLocking()
file <- tempfile()
dir <- tempdir()
h5testFileLocking(dir)
h5testFileLocking(file)
!h5testFileLocking(dir)
if( !h5testFileLocking(dir) ) {
h5disableFileLocking()
}
file <- tempfile()
dir <- tempdir()
h5testFileLocking(dir)
h5testFileLocking(file)
if( !h5testFileLocking(dir) ) {
print("yes")
h5disableFileLocking()
}
setwd("/media/ggj/myqFiles/HongLou")
name.match <- readxl::read_xlsx("name_clean_sorted.xlsx")
View(name.match)
name.match.known <- name.match[!is.na(name.match$标准姓名),]
View(name.match.known)
relation.known <- read.table('relation.txt')
View(relation.known)
View(relation.known)
relation.known <- read.csv('relation.txt')
View(relation.known)
name.match.unknown <- name.match[is.na(name.match$标准姓名),]
View(name.match.unknown)
View(name.match.known)
View(relation.known)
name.match.known <- name.match.known[name.match.known$标准姓名 %in% relation.known$人物2,]
View(name.match.known)
write.csv(name.match.known, file = "name_use.csv")
unique(relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("母", "母亲", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("母亲亲", "母亲", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("父", "父亲", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("父亲亲", "父亲", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("丫头", "丫环", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("大丫环", "丫环", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("好朋友", "好友", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("内侄女", "侄女", relation.known$关系)
relation.known$关系 <- gsub("姐姐", "姐妹", relation.known$关系)
relation.known$关系 <- gsub("妹妹", "姐妹", relation.known$关系)
View(relation.known)
relation.known$关系 <- gsub("陪房丫环", "陪房", relation.known$关系)
sort(unique(relation.known$关系))
View(relation.known)
relation.known$关系 <- gsub("二夫人", "夫人", relation.known$关系)
relation.known$关系 <- gsub("二房", "夫人", relation.known$关系)
relation.known$关系 <- gsub("妻", "夫人", relation.known$关系)
relation.known$关系 <- gsub("妾", "夫人", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("大儿媳", "儿媳", relation.known$关系)
relation.known$关系 <- gsub("小儿媳", "儿媳", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("夫夫人", "夫人", relation.known$关系)
sort(unique(relation.known$关系))
relation.known$关系 <- gsub("小厮", "奴才", relation.known$关系)
relation.known$关系 <- gsub("老奴", "奴才", relation.known$关系)
sort(unique(relation.known$关系))
table(relation.known$关系)
View(relation.known)
relation.known$关系 <- gsub("胞妹", "兄妹", relation.known$关系)
sort(unique(relation.known$关系))
table(relation.known$关系)
View(relation.known)
View(relation.known)
relation.known$关系 <- gsub("表兄妹", "相好", relation.known$关系)
write.csv(name.match.known, file = "name_use.csv")
write.csv(relation.known, file = "relation_refined.csv")
name.match <- readxl::read_xlsx("name_clean_sorted.xlsx")
View(name.match)
write.csv(name.match, file = "name_clean_sorted.csv")
rel.unknown <- read.csv("./OpenNRE/relation_unknown.csv")
View(relation.known)
View(rel.unknown)
rel.unknown <- read.csv("./OpenNRE/relation_unknown.csv", row.names = 1)
View(rel.unknown)
View(rel.unknown)
rel.unknown$cmb = paste0(rel.unknown$X0, rel.unknown$X1)
View(rel.unknown)
rel.unknown <- rel.unknown[order(rel.unknown$cmb, -rel.unknown$X3),]
View(rel.unknown)
rel.unknown <- rel.unknown[!duplicated(rel.unknown$cmb),]
View(rel.unknown)
View(relation.known)
rel.unknown <- rel.unknown[rel.unknown$X3 > 0.8]
rel.unknown <- rel.unknown[rel.unknown$X3 > 0.8,]
View(rel.unknown)
rel.unknown$cmb2 = paste0(rel.unknown$X0, rel.unknown$X2)
View(rel.unknown)
rel.unknown <- rel.unknown[order(rel.unknown$cmb2, -rel.unknown$X3),]
View(rel.unknown)
rel.unknown <- rel.unknown[!duplicated(rel.unknown$cmb2),]
View(rel.unknown)
temp <- readxl::read_xlsx("relation_raw.xlsx")
View(temp)
temp <- readxl::read_xlsx("relation_raw.xlsx")
temp$...1 <- NULL
View(temp)
write.csv(temp, "relation_raw.csv")
